#!/bin/sh

VERSION=$(cat version)
IPC_PROTOCOL_VERSION=1

if test -n "$CC"; then
    echo "Forcing compiler to be $CC"
else
    CC="gcc"
fi
NATIVECC="$CC"
TARGETCC="$NATIVECC"
CC="false"

if test -n "$OBJCOPY" ; then
    echo "Forcing objcopy to be $OBJCOPY"
else
    OBJCOPY="objcopy"
fi
TARGETOBJCOPY=$OBJCOPY

if test -n "$AR" ; then
    echo "Forcing ar to be $AR"
else
    AR="ar"
fi
TARGETAR=$AR

ARCHFLAGS=""
if test -n "$CFLAGS"; then
    ARCHFLAGS="$ARCHFLAGS $CFLAGS"
    echo "Adding $ARCHFLAGS to ARCHFLAGS"
fi

ARCHLIBS=""
if test -n "$LDFLAGS"; then
    ARCHLIBS="$ARCHLIBS $LDFLAGS"
    echo "Adding $ARCHLIBS to ARCHLIBS"
fi

debug_flags="-g"
packageprefix=""
user="no"

# components to compile
useaudacious="yes"
uselibuade="yes"
useuadefs="yes"
useuade123="yes"
useuadecore="yes"
usexmms="yes"

xmmsplugindir=""
audaciousplugindir=""
pkgrequirements="ao"
textscope="no"
n900="no"

set_all_no() {
    useaudacious="no"
    uselibuade="no"
    useuadefs="no"
    useuade123="no"
    useuadecore="no"
    usexmms="no"
}

for opt in "$@" ; do
	case $opt in

# General compilation options

	--prefix=*)
		prefix=`echo $opt | sed -n 's/--prefix=\(.*\)/\1/p'`
		;;
	--package-prefix=*)
		packageprefix=`echo $opt | sed -n 's/--package-prefix=\(.*\)/\1/p'`
		;;

        --bindir=*)
                bindir=`echo $opt | sed -n 's/--bindir=\(.*\)/\1/p'`
                ;;
	--includedir=*)
		includedir=`echo $opt | sed -n 's/--includedir=\(.*\)/\1/p'`
		;;
	--libdir=*)
		libdir=`echo $opt | sed -n 's/--libdir=\(.*\)/\1/p'`
		;;
	--make=*)
	        MAKE=`echo $opt | sed -n 's/--make=\(.*\)/\1/p'`
		;;
	--mandir=*)
		mandir=`echo $opt | sed -n 's/--mandir=\(.*\)/\1/p'`
		;;
	--sharedir=*)
		sharedir=`echo $opt | sed -n 's/--sharedir=\(.*\)/\1/p'`
		;;
	--pkg-config=*)
	        PKG_CONFIG=`echo $opt | sed -n 's/--pkg-config=\(.*\)/\1/p'`
		;;
	--target-ar=*)
	        TARGETAR=`echo $opt | sed -n 's/--target-ar=\(.*\)/\1/p'`
		;;
	--target-cc=*)
	        TARGETCC=`echo $opt | sed -n 's/--target-cc=\(.*\)/\1/p'`
		;;
	--target-objcopy=*)
	        TARGETOBJCOPY=`echo $opt | sed -n 's/--target-objcopy=\(.*\)/\1/p'`
		;;
	--target=*)
	        tmpvar=`echo $opt | sed -n 's/--target=\(.*\)/\1/p'`
		if test -z "$TARGETCC" ; then
		    TARGETCC="$tmpvar-gcc"
		    TARGETOBJCOPY="$tmpvar-objcopy"
		    TARGETAR="$tmpvar-ar"
		fi
		tmpvar=""
		;;

	--no-debug)
		debug_flags=""
		;;

        --user)
		user="yes"
		;;

# Options for frontends

	--audacious-plugin-dir=*)
		audaciousplugindir=`echo $opt | sed -n 's/--audacious-plugin-dir=\(.*\)/\1/p'`
		;;

	--without-audacious)
		useaudacious="no"
		;;
	--only-audacious)
		set_all_no
		useaudacious="yes"
		;;

	--without-libuade)
		uselibuade="no"
		;;
	--only-libuade)
		set_all_no
		uselibuade="yes"
		;;

	--with-text-scope)
		textscope="yes"
		;;

	--without-uade123)
		useuade123="no"
		;;
	--only-uade123)
		set_all_no
		useuade123="yes"
		;;

	--without-uadecore)
		useuadecore="no"
		;;
	--only-uadecore)
		set_all_no
		useuadecore="yes"
		;;

	--without-xmms)
		usexmms="no"
		;;
	--only-xmms)
		set_all_no
		usexmms="yes"
		;;

	--without-uadefs)
		useuadefs="no"
		;;
	--only-uadefs)
		set_all_no
		useuadefs="yes"
		;;

	--xmms-config=*)
	        XMMS_CONFIG=`echo $opt | sed -n 's/--xmms-config=\(.*\)/\1/p'`
		;;
	--xmms-plugin-dir=*)
		xmmsplugindir=`echo $opt | sed -n 's/--xmms-plugin-dir=\(.*\)/\1/p'`
		;;

# Miscellaneous options
	--n900)
	        n900="yes"
		;;

	--help)
		echo
		echo "Installation control:"
                echo " --user                 Install uade to user's home directory. Do not run"
		echo "                        'make install' as root!"
                echo " --prefix=path          Install program under 'path'"
	        echo " --package-prefix=path  File installation prefix (for package maintainers)"
		echo " --bindir=dir           Install executables into this directory"
		echo " --includedir=dir       Add this directory to compilation include path"
		echo " --make=exe             Use 'exe' as the make command"
		echo " --mandir=dir           Install man page to this directory"
		echo " --no-debug             Do not compile debug stuff into executables"
		echo " --libdir=dir           Add this directory to linking path"
		echo " --sharedir=dir         Install data files into this directory"
		echo " --target=arch          Specify target architecture. The compiler will be"
		echo "                        tarch-gcc. (cross compiling)"
		echo " --target-ar=ar         Specify target archiver. (cross compiling)"
		echo " --target-cc=cc         Specify target compiler. (cross compiling)"
		echo " --target-objcopy=objc  Specify target objcopy. (cross compiling)"
		echo
		echo "Plugins and tools to compile:"
		echo " --without-audacious    Do not compile an Audacious plugin"
		echo " --with-text-scope      Enable text scope support (uade123 --scope)"
		echo " --without-libude       Do not compile libuade"
		echo " --without-uade123      Do not compile uade123"
		echo " --without-uadecore     Do not compile uadecore. This is useful for"
		echo "                        distribution makers who want to compile new frontends"
		echo "                        without re-compiling the emulator binary."
		echo " --without-uadefs       Do not compile uadefs filesystem"
		echo " --without-xmms         Do not compile an XMMS plugin"
		echo " --only-audacious       Compile only Audacious plugin"
		echo " --only-libuade         Compile only libuade"
		echo " --only-uade123         Compile only uade123 plugin"
		echo " --only-uadecore        Compile only uadecore"
		echo " --only-uadefs          Compile only uadefs plugin"
		echo " --only-xmms            Compile only XMMS plugin"
		echo " --audacious-plugin-dir=PATH  Install Audacious plugin to PATH"
		echo " --xmms-config=exe      Use 'exe' as xmms-config"
		echo " --xmms-plugin-dir=PATH Install XMMS plugin to PATH"
		echo
		echo "Other:"
		echo " --n900                 Set useful parameters for Nokia N900."
		echo "                        This means 22050Hz frequency and mono sound."
		echo
		echo "Library control:"
		echo " --pkg-config=exe       Use 'exe' as pkg-config executable"
		echo
		exit
		;;
	--x-libraries=*)
		;;
	--x-includes=*)
		;;
	*)
		echo "ignoring option $opt"
		;;
	esac
done

if test -z "$PKG_CONFIG" ; then
    PKG_CONFIG="pkg-config"
fi
"$PKG_CONFIG" --version 2> /dev/null > /dev/null || PKG_CONFIG=""
if test -z "$PKG_CONFIG" ; then
    echo "The system doesn't have pkg-config. You may not be able to compile some frontends (audacious, uadefs, ...)"
fi

if test -z "$XMMS_CONFIG" ; then
    XMMS_CONFIG="xmms-config"
fi

if test "$usexmms" = "yes" ; then
    usexmms="no"
    if test -x "`which $XMMS_CONFIG`" ; then
	usexmms="yes"
	XMMSFLAGS="`$XMMS_CONFIG --cflags`"
	XMMSLIBS="`$XMMS_CONFIG --libs`"
    fi
    if test "$usexmms" = "no" ; then
	echo "Couldn't find xmms-config -> not compiling the XMMS plugin!"
    fi
fi

if test "$useaudacious" = "yes" ; then
    useaudacious="no"
    if test -n "$PKG_CONFIG" ; then
	if test -n "`$PKG_CONFIG audacious --libs 2>/dev/null`"; then
		useaudacious="yes"
		AUDACIOUSFLAGS="`$PKG_CONFIG audacious --cflags`"
		AUDACIOUSLIBS="`$PKG_CONFIG audacious --libs`"
	fi
    fi
    if test "$useaudacious" = "no" ; then
	echo "Couldn't find pkg-config information for audacious plugin -> not compiling it"
    fi
fi

# set kernel type (such as AmigaOS) with environment variable $UADEKERNEL
OS="$UADEKERNEL"
if test -z "$OS" ; then
    OS="`uname`"
fi

UNIXSHELL="yes"
UADE123NAME="uade123"
UADECORENAME="uadecore"

SHAREDLIBRARYFLAGS="-fPIC -shared"

cat >src/frontends/include/uade/sysincludes.h <<EOF
#include <netinet/in.h>
#include <sys/select.h>
EOF

if test -n "$OS" && test "$OS" = "MorphOS"; then
    echo
    echo "Configuring for MorphOS / AmigaOS."
    ARCHFLAGS="$ARCHFLAGS -noixemul"
    usexmms="no"
    useaudacious="no"    
elif test -n "$OS" && test "$OS" = "AmigaOS"; then
    echo
    echo "Configuring for AmigaOS 4."
    ARCHFLAGS="$ARCHFLAGS -lnet -lauto"
    usexmms="no"
    useaudacious="no"
elif test -n "$OS" && test "$OS" = "Darwin"; then
    echo
    echo "Configuring for MacOSX"
    ARCHFLAGS="$ARCHFLAGS -no-cpp-precomp"
    SHAREDLIBRARYFLAGS="-dynamic -bundle -undefined suppress -force_flat_namespace"
elif test -n "$OS" && test "$OS" = "OpenBSD"; then
    # Force gmake for OpenBSD.
    MAKE="gmake"
elif test -n "$OS" && test "$OS" = "FreeBSD"; then
    cat > src/frontends/include/uade/sysincludes.h <<EOF
#include <sys/param.h>
#include <sys/types.h>
#include <sys/time.h>
#include <unistd.h>
#include <strings.h>
EOF
fi

grep -i cygwin 2>/dev/null >/dev/null <<EOF
$OS
EOF
if test "$?" = "0" ; then
    OS="Cygwin"
    UADE123NAME="uade123.exe"
    UADECORENAME="uadecore.exe"
fi

SOUNDSOURCE="sd-sound-generic.c"
SOUNDHEADER="sd-sound-generic.h"
echo "#include \"$SOUNDSOURCE\"" > src/sd-sound.c;
echo "#include \"$SOUNDHEADER\"" > src/sd-sound.h;

MACHINE="`uname -m`"
if test "$MACHINE" = "parisc"; then
    ARCHFLAGS="$ARCHFLAGS -ffunction-sections"
fi

INSTALLTEST="`which ginstall 2>/dev/null`"

if test ! -x "$INSTALLTEST"; then
 if test -n "$OS" && test "$OS" = "SunOS"; then
  echo
  echo "Warning: ginstall not found, install might not work."
  echo "If you do have ginstall make sure it is in your path."
  echo
  INSTALLTEST="`which install`"
 else
  INSTALLTEST="`which install`"
 fi
fi

if test -z "$MAKE" ; then
    if test -n "$OS" && test "$OS" = "MorphOS"; then
	MAKE="make"
    else
	MAKE="`which gmake`"
	if test ! -x "$MAKE"; then
	    MAKE="`which make`"
	fi
	if test ! -x "$MAKE"; then
	    echo FATAL: cannot find make
	    exit 1
	fi
    fi
fi

if test "$user" = "no"; then
    # global installation
    if test -z "$prefix"; then
	prefix="/usr/local"
    fi
    if test "$usexmms" = "yes" ; then
	if test -z "$xmmsplugindir" ; then
	    xmmsplugindir="`xmms-config --input-plugin-dir`"
	fi
    fi
    if test "$useaudacious" = "yes" ; then
	if test -z "$audaciousplugindir" ; then
	    audaciousplugindir="`$PKG_CONFIG audacious --variable=input_plugin_dir`"
	fi
    fi
else
    # user installation
    if test -z "$prefix"; then
	prefix="$HOME"
    fi
    if test "$usexmms" = "yes" ; then
	if test -z "$xmmsplugindir" ; then
	    xmmsplugindir="$HOME/.xmms/Plugins/Input"
	fi
    fi
    if test "$useaudacious" = "yes" ; then
	if test -z "$audaciousplugindir" ; then
	    if $PKG_CONFIG --max-version=1.2.2 audacious ; then
		audaciousplugindir="$HOME/.audacious/Plugins/Input"
	    else
		audaciousplugindir="$HOME/.local/share/audacious/Plugins"	
	    fi
	fi
    fi
fi

uadedatadir="$prefix/share/uade2"
uadecoredir="$prefix/lib/uade2"
if test -z "$bindir"; then
    bindir="$prefix/bin"
fi
if test -z "$includedir" ; then
    includedir="$prefix/include"
fi
if test -z "$libdir" ; then
    libdir="$prefix/lib"
fi
if test -z "$mandir"; then
    mandir="$prefix/share/man/man1"
fi
if test -z "$sharedir" ; then
    sharedir="$prefix/share"
fi

$NATIVECC -v 2>/dev/null >/dev/null
if test "$?" != "0"; then
    echo Native CC "$NATIVECC" not found, please install a C compiler
    exit 1
fi

$TARGETCC -v 2>/dev/null >/dev/null
if test "$?" != "0"; then
    echo Target CC "$TARGETCC" not found, please install a C compiler
    exit 1
fi

cd compat
rm -f ../src/include/stdint.h
cat > stdinttest.c <<EOF
#include <stdint.h>
int main(void) { int8_t a = 0; int16_t b = 0; int32_t c = 0; int64_t d = 0; uint8_t e = 0; uint16_t f = 0; uint32_t g = 0; uint64_t h = 0; intptr_t i = 0; return 0; }
EOF
$TARGETCC $ARCHFLAGS $ARCHLIBS -o stdinttest stdinttest.c 2>/dev/null
if test "$?" != "0" ; then
    echo "#include <inttypes.h>" > ../src/include/stdint.h
    echo "Potential hazard detected: stdint.h is missing (needed for portable types)"
fi
cd ..

if test "$useuade123" = "yes" ; then
    AOFLAGS=""
    AOLIBS="-lao"
    if test -n "$PKG_CONFIG" ; then
	AOFLAGS=$($PKG_CONFIG --cflags ao)
	if test "$?" != "0"; then
	    echo ""
	    echo "Can not compile uade123. Please install libao (including development kit)."
	    echo ""
	    useuade123="no"
	fi
	AOLIBS=$($PKG_CONFIG --libs ao)
    fi
fi

pkgconfigdir="$prefix/lib/pkgconfig"
rm -f uade.pc
if test -n "$PKG_CONFIG" ; then
    installuadepcrule=""
    if test "$useuade123" = "no" ; then
	pkgrequirements=""
    fi
    cat > uade.pc <<EOF
uadecore=$uadecoredir/$UADECORENAME
data_directory=$uadedatadir
ipc_protocol_version=$IPC_PROTOCOL_VERSION

Name: UADE (Unix Amiga Delitracker Emulator)
Description: A music player for Amiga music formats
Version: $VERSION
Requires: $pkgrequirements
EOF
fi

if test "$useuadefs" = "yes" ; then
    useuadefs="no"
    if test -n "$PKG_CONFIG" ; then
	if test -n "$($PKG_CONFIG fuse --libs 2>/dev/null)" ; then
	    useuadefs="yes"
	fi
    fi
fi

# Target is UNIX.
cat > src/ossupport.c <<EOF
#include <uade/ossupport.h>

#include "unixsupport.c"
EOF

cat > src/frontends/include/uade/ossupport.h <<EOF
#ifndef _UADE_OSSUPPORT_H_
#define _UADE_OSSUPPORT_H_

#include <uade/unixsupport.h>

EOF
cd compat
$TARGETCC $ARCHFLAGS $ARCHLIBS -o memmemtest memmemtest.c 2>/dev/null
if test "$?" != "0" ; then
    cat memmemrep.h >> ../src/frontends/include/uade/ossupport.h
    cat memmemrep.c >> ../src/ossupport.c
    echo "Using memmem() replacement"
fi

$TARGETCC $ARCHFLAGS $ARCHLIBS -o strltest strltest.c 2>/dev/null
if test -e "strltest" ; then
    echo "#include <string.h>" >> ../src/frontends/include/uade/ossupport.h
else
    cat strlrep.c >> ../src/ossupport.c
    cat strlrep.h >> ../src/frontends/include/uade/ossupport.h
    echo "Using strlcpy/cat() replacements"
fi

$TARGETCC $ARCHFLAGS $ARCHLIBS -o canontest canontest.c 2>/dev/null
if test ! -e "canontest" ; then
    cat canonrep.c >> ../src/ossupport.c
    cat canonrep.h >> ../src/frontends/include/uade/ossupport.h
    echo "Using canonical_file_name() replacement"
fi

echo "#endif" >> ../src/frontends/include/uade/ossupport.h

csfile="../src/include/compilersupport.h"
echo "#ifndef _UADE_COMPILER_SUPPORT_H_" > "$csfile"
echo "#define _UADE_COMPILER_SUPPORT_H_" >> "$csfile"
$TARGETCC $ARCHFLAGS $ARCHLIBS -o unlikelytest unlikelytest.c 2>/dev/null
if test "$?" = "0" ; then
    cat >> "$csfile" <<EOF
#define likely(x)	__builtin_expect(!!(x), 1)
#define unlikely(x)	__builtin_expect(!!(x), 0)
EOF
else
    cat >> "$csfile" <<EOF
#define likely(x) (!!(x))
#define unlikely(x) (!!(x))
EOF
fi
echo "#endif" >> "$csfile"
cd ..

conffile="src/frontends/include/uade/uadeoptions.h"
echo > "$conffile"

if test "$user" = "yes" ; then
    echo "#define UADE_CONFIG_USER_MODE (1)" >> "$conffile"
else
    echo "#define UADE_CONFIG_USER_MODE (0)" >> "$conffile"
fi

echo "#define UADE_CONFIG_BASE_DIR \"$uadedatadir\"" >> "$conffile"

echo "#define UADE_CONFIG_UADE_CORE \"$uadecoredir/$UADECORENAME\"" >> "$conffile"
test -c /dev/urandom && echo "#define UADE_CONFIG_HAVE_URANDOM" >> "$conffile"

echo "#define UADE_VERSION \"$VERSION\"" >> "$conffile"

test "$OS" = "Cygwin" && echo "#define UADE_HAVE_CYGWIN" >> "$conffile"

test "$textscope" = "yes" && echo "#define UADE_CONFIG_TEXT_SCOPE" >> "$conffile"

echo ""
echo "UADE and frontends is installed to      : $bindir"
echo "Data directory                          : $uadedatadir"
echo "Uadecore directory                      : $uadecoredir"
echo "Man (documentation) directory           : $mandir"
echo "Installer                               : $INSTALLTEST"
echo "Make                                    : $MAKE"
if test "$TARGETCC" != "$NATIVECC" ; then
    echo "Native CC                               : $NATIVECC"
fi
echo "Target CC                               : $TARGETCC"
echo "libuade                                 : $uselibuade"
echo "uadecore                                : $useuadecore"
echo "uade123                                 : $useuade123"
if test "$useuade123" = "yes" ; then
    echo "uade123 sound output                    : AO"
fi
echo "XMMS plugin                             : $usexmms"
if test "$usexmms" = "yes" ; then
    echo "XMMS plugin directory                   : $xmmsplugindir"
fi
echo "Audacious plugin                        : $useaudacious"
if test "$useaudacious" = "yes" ; then
    echo "Audacious plugin directory              : $audaciousplugindir"
fi
echo "uadefs                                  : $useuadefs"
echo "Text scope support                      : $textscope"
echo

libuaderule=""
uadecorerule=""
uade123rule=""
xmmspluginrule=""
audaciouspluginrule=""
uadefsrule=""

if test "$uselibuade" = "yes" ; then
    libuaderule="libuade"
fi
if test "$useuadecore" = "yes" ; then
    uadecorerule="uadecore"
fi
if test "$useuade123" = "yes" ; then
    uade123rule="uade123"
fi
if test "$usexmms" = "yes" ; then
    xmmspluginrule="xmmsplugin"
fi
if test "$useaudacious" = "yes" ; then
    audaciouspluginrule="audaciousplugin"
fi
if test "$useuadefs" = "yes" ; then
    uadefsrule="uadefs"
fi

replace_with_sed() {
    sed -e "s|{ARCHFLAGS}|$ARCHFLAGS|g" \
	-e "s|{ARCHLIBS}|$ARCHLIBS|g" \
	-e "s|{AOFLAGS}|$AOFLAGS|g" \
	-e "s|{AOLIBS}|$AOLIBS|g" \
	-e "s|{XMMSFLAGS}|$XMMSFLAGS|g" \
	-e "s|{XMMSLIBS}|$XMMSLIBS|g" \
	-e "s|{AUDACIOUSFLAGS}|$AUDACIOUSFLAGS|g" \
	-e "s|{AUDACIOUSLIBS}|$AUDACIOUSLIBS|g" \
	-e "s|{AR}|$TARGETAR|g" \
	-e "s|{CC}|$TARGETCC|g" \
	-e "s|{OBJCOPY}|$TARGETOBJCOPY|g" \
	-e "s|{NATIVECC}|$NATIVECC|g" \
	-e "s|{SOUNDSOURCE}|$SOUNDSOURCE|g" \
	-e "s|{SOUNDHEADER}|$SOUNDHEADER|g" \
	-e "s|{DEBUGFLAGS}|$debug_flags|g" \
	-e "s|{SHAREDLIBRARYFLAGS}|$SHAREDLIBRARYFLAGS|g" \
	-e "s|{VERSION}|$VERSION|g" \
	-e "s|{MAKE}|$MAKE|g" \
	-e "s|{DATADIR}|$uadedatadir|g" \
	-e "s|{BINDIR}|$bindir|g" \
	-e "s|{MANDIR}|$mandir|g" \
	-e "s|{INCLUDEDIR}|$includedir|g" \
	-e "s|{LIBDIR}|$libdir|g" \
	-e "s|{UADECOREDIR}|$uadecoredir|g" \
	-e "s|{PACKAGEPREFIX}|$packageprefix|g" \
	-e "s|{UADECORENAME}|$UADECORENAME|g" \
	-e "s|{LIBUADE}|$libuaderule|g" \
	-e "s|{UADECORE}|$uadecorerule|g" \
	-e "s|{UADE123NAME}|$UADE123NAME|g" \
	-e "s|{UADE123}|$uade123rule|g" \
	-e "s|{XMMSPLUGIN}|$xmmspluginrule|g" \
	-e "s|{XMMSPLUGINDIR}|$xmmsplugindir|g" \
	-e "s|{AUDACIOUSPLUGIN}|$audaciouspluginrule|g" \
	-e "s|{AUDACIOUSPLUGINDIR}|$audaciousplugindir|g" \
	-e "s|{UADEFS}|$uadefsrule|g" \
	-e "s|{PKGCONFIGDIR}|$pkgconfigdir|g" \
	"$@"
}

for file in Makefile.in src/Makefile.in src/frontends/*/Makefile.in src/frontends/mod2ogg/mod2ogg2.sh.in ; do
    dst="`echo $file |sed -e "s|\.in||"`"
    replace_with_sed "$file" > "$dst"
done

# Make mod2ogg script executable
chmod u+x src/frontends/mod2ogg/mod2ogg2.sh

cp uade.conf.in uade.conf
if test "$n900" = "yes" ; then
    cat >> uade.conf <<EOF

# N900 specific options added by configure script

panning 1
frequency 22050
EOF
fi
